import React, { useEffect, useMemo, useState } from "react";
import {Label} from '../components/label'
import {Divider} from "@public/components/divider";
import {Header} from "@public/components/header";
import {Row} from "@public/components/row";
/**
 * UI Pages (React + Tailwind)
 * 1) ConfigureRepoPage ‚Äî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Owner/Org, ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡πá‡∏ô Helm-<AppName>), ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Teams
 * 2) VariablesPage ‚Äî ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ${VAR} ‡∏à‡∏≤‡∏Å template ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô‡∏•‡∏á‡πÉ‡∏ô Chart.yaml/values.yaml ‡∏û‡∏£‡πâ‡∏≠‡∏° Preview
 *
 * Note: ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Connection Center (PAT only) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 *
 * üëâ ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å SyntaxError: Unterminated string constant
 *    - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô prompt ‡∏Ç‡∏≠‡∏á Import .env ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ template literal ‡∏û‡∏£‡πâ‡∏≠‡∏° \n
 * üëâ ‡πÅ‡∏Å‡πâ regex split ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î .env ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô /\r?\n/
 * üëâ ‡∏õ‡∏£‡∏±‡∏ö regex ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏µ‡∏î '-' ‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™ (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞)
 * üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏° Test cases (‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ window.__RUN_TESTS__ = true)
 */

// ============================================================================
// Page 2: Configure Repo
// ============================================================================
export default function RepoConfig() {
    // ======= State =======
    const [connections, setConnections] = useState<ConnectionItem[]>([]);
    const [connectionId, setConnectionId] = useState<string>("");

    const [owners, setOwners] = useState<OwnerItem[]>([]);
    const [owner, setOwner] = useState<string>(""); // login ‡∏Ç‡∏≠‡∏á owner
    const [ownerType, setOwnerType] = useState<"User" | "Org" | "">("");

    const [appName, setAppName] = useState("");
    const [repoName, setRepoName] = useState("");
    const [useSuggestion, setUseSuggestion] = useState(true);

    const [checking, setChecking] = useState(false);
    const [exists, setExists] = useState<boolean | null>(null);

    const [teams, setTeams] = useState<TeamOption[]>([]); // ‡∏à‡∏≤‡∏Å org
    const [teamQuery, setTeamQuery] = useState("");
    const [selectedTeams, setSelectedTeams] = useState<SelectedTeam[]>([]);

    const suggestedName = useMemo(() => suggestRepoName(appName), [appName]);

    // ======= Init: load connections =======
    useEffect(() => {
        (async () => {
            try {
                const res = await fetch("/api/connections");
                const data = (await res.json()) as { items: ConnectionItem[] };
                setConnections(data.items || []);
                const def = data.items?.find((x) => x.default) || data.items?.[0];
                if (def) setConnectionId(def.id);
            } catch {}
        })();
    }, []);

    // ======= Load owners when connection changes =======
    useEffect(() => {
        if (!connectionId) return;
        (async () => {
            try {
                const res = await fetch(`/api/github/orgs?connection=${connectionId}`);
                const data = (await res.json()) as { owners: OwnerItem[] };
                setOwners(data.owners || []);
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                if (data.owners?.length) {
                    const first = data.owners[0];
                    setOwner(first.login);
                    setOwnerType(first.type);
                }
            } catch {}
        })();
    }, [connectionId]);

    // ======= Load teams when owner (Org) changes =======
    useEffect(() => {
        if (!connectionId || !owner || ownerType !== "Org") return;
        (async () => {
            try {
                const res = await fetch(`/api/github/orgs/${owner}/teams?connection=${connectionId}`);
                const data = (await res.json()) as { teams: TeamOption[] };
                setTeams(data.teams || []);
            } catch {}
        })();
    }, [connectionId, owner, ownerType]);

    // ======= Suggestion binding =======
    useEffect(() => {
        if (useSuggestion) setRepoName(suggestedName);
    }, [suggestedName, useSuggestion]);

    // ======= Check availability =======
    useEffect(() => {
        if (!owner || !repoName || !connectionId) {
            setExists(null);
            return;
        }
        const handle = setTimeout(async () => {
            setChecking(true);
            try {
                const res = await fetch(`/api/github/repos/check?owner=${encodeURIComponent(owner)}&name=${encodeURIComponent(repoName)}&connection=${connectionId}`);
                const data = (await res.json()) as { exists: boolean };
                setExists(data.exists);
            } catch {
                setExists(null);
            } finally {
                setChecking(false);
            }
        }, 450);
        return () => clearTimeout(handle);
    }, [owner, repoName, connectionId]);

    const filteredTeams = useMemo(() => {
        if (!teamQuery) return teams;
        const q = teamQuery.toLowerCase();
        return teams.filter((t) => (t.name + t.slug).toLowerCase().includes(q));
    }, [teams, teamQuery]);

    // ======= Actions =======
    function addTeam(t: TeamOption) {
        if (selectedTeams.some((x) => x.slug === t.slug)) return;
        setSelectedTeams((prev) => [...prev, { slug: t.slug, name: t.name, permission: "maintain" }]);
    }
    function removeTeam(slug: string) {
        setSelectedTeams((prev) => prev.filter((x) => x.slug !== slug));
    }
    function updatePermission(slug: string, p: Permission) {
        setSelectedTeams((prev) => prev.map((x) => (x.slug === slug ? { ...x, permission: p } : x)));
    }

    async function handleNext() {
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ config ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô wizard (‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå/‡∏Ñ‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å)
        await fetch("/api/wizard/config", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ connectionId, owner, repoName, appName, teams: selectedTeams }),
        }).catch(() => {});
        // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Variables
        window.location.hash = "#/variables";
    }

    return (
        <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white text-slate-900 dark:from-slate-900 dark:to-slate-950 dark:text-slate-100">
            <div className="mx-auto max-w-6xl px-4 py-10">
                <Header title="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Repository" subtitle="‡∏Å‡∏≥‡∏´‡∏ô‡∏î owner, ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏£‡∏µ‡πÇ‡∏õ" />

                <div className="mt-8 grid gap-6 lg:grid-cols-5">
                    {/* LEFT: Form */}
                    <section className="lg:col-span-3">
                        <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900">
                            {/* Connection */}
                            <div className="grid gap-2">
                                <Label>Connection</Label>
                                <select
                                    value={connectionId}
                                    onChange={(e) => setConnectionId(e.target.value)}
                                    className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:border-slate-400 dark:border-slate-700 dark:bg-slate-800"
                                >
                                    {connections.map((c) => (
                                        <option key={c.id} value={c.id}>
                                            {c.alias} ‚Äî {c.user?.login}
                                        </option>
                                    ))}
                                </select>
                                <p className="text-xs text-slate-500">
                                    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£/‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ <a href="#/connections" className="underline decoration-dotted">Connections</a>
                                </p>
                            </div>

                            <Divider />

                            {/* Owner */}
                            <div className="grid gap-2">
                                <Label>Owner / Organization</Label>
                                <select
                                    value={owner}
                                    onChange={(e) => {
                                        setOwner(e.target.value);
                                        const o = owners.find((x) => x.login === e.target.value);
                                        setOwnerType((o?.type as any) || "");
                                        setSelectedTeams([]); // reset teams ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô owner
                                    }}
                                    className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:border-slate-400 dark:border-slate-700 dark:bg-slate-800"
                                >
                                    {owners.map((o) => (
                                        <option key={o.login} value={o.login}>
                                            {o.name ? `${o.name} (@${o.login})` : o.login} {o.type === "Org" ? "‚Äî Org" : "‚Äî User"}
                                        </option>
                                    ))}
                                </select>
                            </div>

                            <Divider />

                            {/* App & Repo name */}
                            <div className="grid gap-4 md:grid-cols-2">
                                <div>
                                    <Label>‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ (‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ)</Label>
                                    <input
                                        value={appName}
                                        onChange={(e) => setAppName(e.target.value)}
                                        placeholder="‡πÄ‡∏ä‡πà‡∏ô booking-service"
                                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:border-slate-400 dark:border-slate-700 dark:bg-slate-800"
                                    />
                                    <p className="mt-1 text-[11px] text-slate-500">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ‡πÄ‡∏õ‡πá‡∏ô <code>Helm-{`{AppName}`}</code> ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ</p>
                                </div>
                                <div>
                                    <div className="flex items-center justify-between">
                                        <Label>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ (Repo name)</Label>
                                        <label className="flex items-center gap-2 text-xs">
                                            <input type="checkbox" checked={useSuggestion} onChange={(e) => setUseSuggestion(e.target.checked)} />
                                            <span>‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</span>
                                        </label>
                                    </div>
                                    <input
                                        value={repoName}
                                        onChange={(e) => { setRepoName(e.target.value); setUseSuggestion(false); }}
                                        placeholder="Helm-booking-service"
                                        className="mt-1 w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:border-slate-400 dark:border-slate-700 dark:bg-slate-800"
                                    />
                                    <Availability exists={exists} checking={checking} owner={owner} name={repoName} />
                                </div>
                            </div>

                            {/* Teams (Org only) */}
                            {ownerType === "Org" && (
                                <div className="mt-6">
                                    <div className="flex items-center justify-between">
                                        <Label>Teams & Permissions</Label>
                                        <small className="text-slate-500">‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Organization</small>
                                    </div>

                                    <div className="mt-2 grid gap-3 rounded-xl border border-slate-200 p-3 dark:border-slate-800">
                                        <div className="flex items-center gap-2">
                                            <input
                                                value={teamQuery}
                                                onChange={(e) => setTeamQuery(e.target.value)}
                                                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ team ‡πÉ‡∏ô org ‡∏ô‡∏µ‡πâ"
                                                className="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm outline-none focus:border-slate-400 dark:border-slate-700 dark:bg-slate-800"
                                            />
                                            <button
                                                className="rounded-lg border border-slate-300 px-3 py-2 text-xs hover:bg-slate-50 dark:border-slate-700 dark:hover:bg-slate-800"
                                                onClick={() => setTeamQuery("")}
                                            >
                                                ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
                                            </button>
                                        </div>

                                        <div className="max-h-52 overflow-auto rounded-lg border border-slate-200 dark:border-slate-800">
                                            {filteredTeams.length === 0 ? (
                                                <div className="p-3 text-sm text-slate-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°</div>
                                            ) : (
                                                <ul className="divide-y divide-slate-200 text-sm dark:divide-slate-800">
                                                    {filteredTeams.map((t) => (
                                                        <li key={t.slug} className="flex items-center justify-between px-3 py-2">
                                                            <div>
                                                                <div className="font-medium">{t.name}</div>
                                                                <div className="text-xs text-slate-500">@{t.slug}</div>
                                                            </div>
                                                            <button
                                                                onClick={() => addTeam(t)}
                                                                disabled={selectedTeams.some((x) => x.slug === t.slug)}
                                                                className="rounded-lg border border-slate-300 px-3 py-1.5 text-xs hover:bg-slate-50 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-700 dark:hover:bg-slate-800"
                                                            >
                                                                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏°
                                                            </button>
                                                        </li>
                                                    ))}
                                                </ul>
                                            )}
                                        </div>

                                        {selectedTeams.length > 0 && (
                                            <div className="rounded-lg border border-slate-200 p-3 dark:border-slate-800">
                                                <div className="mb-2 text-sm font-medium">‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
                                                <ul className="space-y-2">
                                                    {selectedTeams.map((t) => (
                                                        <li key={t.slug} className="flex items-center justify-between gap-2">
                                                            <div className="truncate">
                                                                <span className="font-medium">{t.name}</span>
                                                                <span className="ml-2 text-xs text-slate-500">@{t.slug}</span>
                                                            </div>
                                                            <div className="flex items-center gap-2">
                                                                <select
                                                                    value={t.permission}
                                                                    onChange={(e) => updatePermission(t.slug, e.target.value as Permission)}
                                                                    className="rounded-lg border border-slate-300 bg-white px-2 py-1 text-xs dark:border-slate-700 dark:bg-slate-800"
                                                                >
                                                                    <option value="admin">admin</option>
                                                                    <option value="maintain">maintain</option>
                                                                    <option value="push">push</option>
                                                                    <option value="triage">triage</option>
                                                                    <option value="read">read</option>
                                                                </select>
                                                                <button
                                                                    onClick={() => removeTeam(t.slug)}
                                                                    className="rounded-lg border border-rose-300 px-2 py-1 text-xs text-rose-700 hover:bg-rose-50 dark:border-rose-900/40 dark:text-rose-300 dark:hover:bg-rose-900/20"
                                                                >
                                                                    ‡∏•‡∏ö
                                                                </button>
                                                            </div>
                                                        </li>
                                                    ))}
                                                </ul>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            <div className="mt-6 flex items-center justify-between">
                                <a href="#/connections" className="text-sm underline decoration-dotted">‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: Connections</a>
                                <button
                                    onClick={handleNext}
                                    disabled={!connectionId || !owner || !repoName || exists === true}
                                    className="rounded-xl bg-slate-900 px-4 py-3 text-sm font-medium text-white hover:opacity-90 disabled:cursor-not-allowed disabled:opacity-50 dark:bg-slate-200 dark:text-slate-900"
                                >
                                    ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: Variables
                                </button>
                            </div>
                        </div>
                    </section>

                    {/* RIGHT: Summary */}
                    <aside className="lg:col-span-2">
                        <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900">
                            <h3 className="text-sm font-medium">‡∏™‡∏£‡∏∏‡∏õ</h3>
                            <div className="mt-3 space-y-3 text-sm">
                                <Row label="Connection" value={connections.find((x) => x.id === connectionId)?.alias || "‚Äì"} />
                                <Row label="Owner" value={owner || "‚Äì"} />
                                <Row label="Repo name" value={repoName || suggestedName || "‚Äì"} />
                                {ownerType === "Org" && <Row label="Teams" value={selectedTeams.length ? `${selectedTeams.length} team(s)` : "‚Äì"} />}
                            </div>
                            {owner && repoName && (
                                <div className="mt-4 rounded-lg border border-slate-200 p-3 text-xs dark:border-slate-800">
                                    <div className="font-medium">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)</div>
                                    <pre className="mt-2 whitespace-pre-wrap break-words">{`helm repo add ${repoName.toLowerCase()} https://${owner}.github.io/${repoName}/\nhelm search repo ${repoName.toLowerCase()}`}</pre>
                                </div>
                            )}
                        </div>

                        <div className="mt-4 rounded-2xl border border-amber-200 bg-amber-50 p-4 text-xs text-amber-700 dark:border-amber-900/40 dark:bg-amber-900/20 dark:text-amber-300">
                            ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå <b>fine-grained</b> PAT ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Org/Repo ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏° ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå <code>admin:org</code>
                        </div>
                    </aside>
                </div>
            </div>
        </div>
    );
}

// ======= Types (Configure) =======

type ConnectionItem = { id: string; alias: string; default?: boolean; user?: { login: string } };
type OwnerItem = { type: "User" | "Org"; login: string; name?: string; avatar?: string };
type TeamOption = { slug: string; name: string };
type Permission = "admin" | "maintain" | "push" | "triage" | "read";
type SelectedTeam = { slug: string; name: string; permission: Permission };

// ======= UI bits (shared) =======





function Availability({ exists, checking, owner, name }: { exists: boolean | null; checking: boolean; owner?: string; name?: string }) {
    if (!owner || !name) return <p className="mt-1 text-[11px] text-slate-500">‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</p>;
    if (checking) return <p className="mt-1 text-[11px] text-slate-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‚Ä¶</p>;
    if (exists === true)
        return <p className="mt-1 text-[11px] text-rose-600">‡∏ä‡∏∑‡πà‡∏≠ <b>{name}</b> ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô <b>{owner}</b> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô</p>;
    if (exists === false)
        return <p className="mt-1 text-[11px] text-emerald-600">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚úì</p>;
    return <p className="mt-1 text-[11px] text-slate-500">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</p>;
}

// ======= Utils (shared) =======

function suggestRepoName(app: string) {
    if (!app) return "Helm-";
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πÄ‡∏õ‡∏ã‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏µ‡∏î, ‡∏ï‡∏±‡∏î‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡∏≠‡∏≠‡∏Å (‡∏ß‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ '-' ‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™)
    const cleaned = app
        .trim()
        .replace(/\s+/g, "-")
        .replace(/[^A-Za-z0-9_-]/g, "");
    return `Helm-${cleaned}`;
}
